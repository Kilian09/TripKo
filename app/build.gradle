plugins {
    id 'com.android.application'
    id 'jacoco'
}


jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(
        type: JacocoReport,
        dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']
) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*'
    ]
    def debugTree = fileTree(
            dir: "$project.buildDir/intermediates/javac/debug",
            excludes: fileFilter
    )
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(
            dir: project.buildDir,
            includes: [
                    'jacoco/testDebugUnitTest.exec',
                    'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
            ]
    ))
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "dda.es.ulpgc.kilian.garcia106.tripko"
        minSdkVersion 25
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testApplicationId "dda.es.ulpgc.kilian.garcia106.tripko.test"
        testInstrumentationRunner "dda.es.ulpgc.kilian.garcia106.tripko.Instrumentation"
    }

    sourceSets {
        androidTest {
            assets.srcDirs = ['src/androidTest/assets']
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            buildConfigField "String", "TEST_TAGS", "\"${getTestTags()}\""
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {

        //execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.drawerlayout:drawerlayout:1.0.0'
    implementation 'androidx.room:room-runtime:2.3.0'
    implementation 'com.google.code.gson:gson:2.8.2'

    androidTestImplementation 'info.cukes:cucumber-android:1.2.5@jar'
    androidTestImplementation 'info.cukes:cucumber-picocontainer:1.2.4'

    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'


    testImplementation 'junit:junit:4.13'
    testImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'org.robolectric:robolectric:4.4'
    annotationProcessor 'androidx.room:room-compiler:2.3.0'
}

def getTestTags() {
    return project.hasProperty("tags") ? project.getProperties().get("tags") : ""
}
